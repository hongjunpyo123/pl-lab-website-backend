<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>PL Lab 지원서</title>
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@300;400;500;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --naver-green: #03c75a;
            --naver-green-dark: #009f47;
            --naver-gray: #8e8e8e;
            --naver-light-gray: #f5f6f7;
            --naver-border: #e6e6e6;
            --naver-text: #333333;
            --naver-error: #ff3a35;
            --naver-background: #f9f9f9;
        }

        @import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700&family=Noto+Sans+KR:wght@300;400;500;700&display=swap');

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Noto Sans KR', 'Apple SD Gothic Neo', sans-serif;
        }

        h1, h2, h3, .submit-btn, .section-title {
            font-family: 'Montserrat', 'Noto Sans KR', sans-serif;
        }

        body {
            background-color: var(--naver-background);
            color: var(--naver-text);
            line-height: 1.6;
        }

        .container {
            max-width: 720px;
            margin: 0 auto;
            padding: 0;
            width: 100%;
            box-sizing: border-box;
            background: white;
            background-repeat: no-repeat;
            background-position: top center;
        }

        .header {
            background-color: var(--naver-green);
            color: white;
            padding: 35px 20px;
            text-align: center;
            border-radius: 12px 12px 0 0;
            position: relative;
            overflow: hidden;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .header::after {
            content: "";
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(to right, rgba(255,255,255,0.4), rgba(255,255,255,0.1), rgba(255,255,255,0.4));
        }

        .header:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(3, 199, 90, 0.2);
        }

        .header h1 {
            font-size: 28px;
            margin-bottom: 8px;
            font-weight: 700;
            color: white;
            text-shadow: 0 2px 4px rgba(0,0,0,0.15);
            letter-spacing: 0.5px;
            transition: transform 0.3s ease;
        }

        .header:hover h1 {
            transform: scale(1.05);
        }

        .header p {
            font-size: 17px;
            color: rgba(255, 255, 255, 0.95);
            font-weight: 400;
            letter-spacing: 0.3px;
        }

        .main-form {
            background-color: white;
            border-radius: 0 0 15px 15px;
            box-shadow: 0 2px 15px rgba(0,0,0,0.08);
            margin: 0 15px 30px;
            overflow: hidden;
        }

        .form-container {
            background-color: white;
            padding: 30px 25px;
        }

        .form-section {
            margin-bottom: 40px;
            padding-bottom: 30px;
            border-bottom: 1px solid var(--naver-border);
        }

        .form-section:last-child {
            border-bottom: none;
            margin-bottom: 0;
            padding-bottom: 10px;
        }

        .section-title {
            font-size: 18px;
            margin-bottom: 30px;
            color: var(--naver-text);
            font-weight: 600;
            border-bottom: 1px solid var(--naver-border);
            padding-bottom: 12px;
            position: relative;
            letter-spacing: 0.5px;
            transition: color 0.3s, transform 0.3s, letter-spacing 0.3s;
            cursor: default;
        }

        .section-title:hover {
            color: var(--naver-green);
            transform: translateX(5px);
            letter-spacing: 0.8px;
        }

        .section-title::after {
            content: "";
            position: absolute;
            bottom: -1px;
            left: 0;
            width: 40px;
            height: 3px;
            background-color: var(--naver-green);
            transition: width 0.4s ease, background-color 0.3s;
        }

        .section-title:hover::after {
            width: 100%;
            background-color: var(--naver-green-dark);
        }

        .form-notice {
            background-color: #f0f9ff;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 30px;
            font-size: 15px;
            border-left: 4px solid #4dabf7;
        }

        .form-notice h3 {
            margin-bottom: 10px;
            color: #1c7ed6;
            font-weight: 700;
            font-size: 17px;
            display: flex;
            align-items: center;
        }

        .form-notice h3::before {
            content: "i";
            display: inline-flex;
            align-items: center;
            justify-content: center;
            width: 20px;
            height: 20px;
            background-color: #4dabf7;
            color: white;
            border-radius: 50%;
            margin-right: 8px;
            font-size: 14px;
            font-weight: bold;
        }

        /* API 질문 관련 스타일 */
        .loading-questions {
            padding: 25px;
            text-align: center;
            color: var(--naver-gray);
            font-size: 16px;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .loading-spinner {
            display: inline-block;
            width: 30px;
            height: 30px;
            border: 3px solid rgba(3, 199, 90, 0.3);
            border-radius: 50%;
            border-top-color: var(--naver-green);
            animation: spin 1s ease-in-out infinite;
            margin-bottom: 15px;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        .api-question {
            margin-bottom: 20px;
            padding: 20px;
            border-radius: 12px;
            background-color: #f9fbfc;
            border: 1px solid #e9ecef;
            animation: fadeIn 0.5s ease-out forwards;
            position: relative;
            overflow: hidden;
            transition: transform 0.3s ease, box-shadow 0.3s ease, border-color 0.3s ease;
        }

        .api-question:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.05);
            border-color: #d0d7de;
        }

        .api-question::before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 5px;
            height: 100%;
            background-color: var(--naver-green);
            opacity: 0.7;
            transition: opacity 0.3s ease, width 0.3s ease;
        }

        .api-question:hover::before {
            opacity: 1;
            width: 7px;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .question-text {
            font-weight: 600;
            margin-bottom: 10px;
            font-size: 16px;
            color: var(--naver-text);
            display: flex;
            align-items: flex-start;
        }

        .question-number {
            display: flex;
            align-items: center;
            justify-content: center;
            min-width: 28px;
            height: 28px;
            background-color: var(--naver-green);
            color: white;
            border-radius: 6px;
            margin-right: 12px;
            font-size: 14px;
            font-weight: bold;
            flex-shrink: 0;
            box-shadow: 0 2px 4px rgba(3, 199, 90, 0.2);
        }

        .question-description {
            font-size: 14px;
            color: var(--naver-gray);
            margin-bottom: 15px;
            margin-left: 35px;
        }

        .api-error {
            color: var(--naver-error);
            text-align: center;
            padding: 20px;
            background-color: #fff5f5;
            border-radius: 8px;
            margin-top: 15px;
            font-weight: 500;
            border: 1px solid #ffe3e3;
        }

        /* 개인정보 입력 폼 스타일 */
        .personal-info-grid {
            display: grid;
            grid-template-columns: 1fr;
            gap: 20px;
            margin-bottom: 20px;
            position: relative;
        }

        .personal-info-grid::before {
            content: "";
            position: absolute;
            top: -10px;
            left: -10px;
            right: -10px;
            bottom: -10px;
            background: radial-gradient(circle at center, rgba(3, 199, 90, 0.03) 0%, rgba(255, 255, 255, 0) 70%);
            opacity: 0;
            transition: opacity 0.5s ease;
            z-index: -1;
            pointer-events: none;
        }

        .form-section:hover .personal-info-grid::before {
            opacity: 1;
        }

        .form-group {
            margin-bottom: 20px;
            position: relative;
            transition: transform 0.3s ease;
        }

        .form-group:hover {
            transform: translateY(-2px);
        }

        .form-label {
            display: block;
            margin-bottom: 10px;
            font-weight: 500;
            font-size: 15px;
            color: var(--naver-text);
            transition: color 0.3s, transform 0.3s;
            transform-origin: left;
        }

        .form-group:hover .form-label {
            color: var(--naver-green);
            transform: scale(1.03);
        }

        .required-mark {
            color: var(--naver-error);
            margin-left: 4px;
            transition: transform 0.3s;
            display: inline-block;
        }

        .form-group:hover .required-mark {
            animation: pulse 1s infinite;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.2); }
            100% { transform: scale(1); }
        }

        .form-input {
            width: 100%;
            padding: 14px 15px;
            border: 1px solid var(--naver-border);
            border-radius: 8px;
            font-size: 15px;
            transition: all 0.3s ease;
            height: 50px;
            background-color: white;
            position: relative;
            z-index: 1;
        }

        .form-input:focus {
            outline: none;
            border-color: var(--naver-green);
            box-shadow: 0 0 0 3px rgba(3, 199, 90, 0.1);
            padding-left: 18px;
        }

        .form-input:hover {
            border-color: #b3b3b3;
            transform: translateX(2px);
        }

        .form-group::after {
            content: "";
            position: absolute;
            bottom: -8px;
            left: 0;
            width: 0;
            height: 2px;
            background-color: var(--naver-green);
            transition: width 0.4s ease;
            z-index: 0;
        }

        .form-group:focus-within::after {
            width: 100%;
        }

        select.form-input {
            appearance: none;
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%238e8e8e' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
            background-repeat: no-repeat;
            background-position: right 15px center;
            padding-right: 40px;
            cursor: pointer;
            transition: background-position 0.3s ease, padding 0.3s ease, border-color 0.3s, box-shadow 0.3s, transform 0.3s;
        }

        select.form-input:hover {
            background-position: right 12px center;
            border-color: #b3b3b3;
            transform: translateX(2px);
        }

        select.form-input:focus {
            background-position: right 10px center;
            padding-left: 18px;
            border-color: var(--naver-green);
            box-shadow: 0 0 0 3px rgba(3, 199, 90, 0.1);
        }

        /* 답변 폼 스타일 */
        .answer-form {
            margin-top: 8px;
            margin-left: 35px;
            transition: transform 0.3s ease;
        }

        .answer-form:focus-within {
            transform: translateY(5px);
        }

        .textarea-container {
            position: relative;
            overflow: hidden;
            border-radius: 8px;
            transition: transform 0.3s ease;
        }

        textarea.answer-input {
            width: 100%;
            padding: 12px;
            border: 1px solid var(--naver-border);
            border-radius: 8px;
            font-size: 15px;
            min-height: 70px; /* 처음에는 더 작은 높이로 시작 */
            resize: vertical;
            margin-bottom: 5px;
            transition: min-height 0.3s ease, border-color 0.3s, box-shadow 0.3s;
            background-color: white;
        }

        textarea.answer-input:focus {
            outline: none;
            border-color: var(--naver-green);
            box-shadow: 0 0 0 3px rgba(3, 199, 90, 0.1);
            min-height: 160px; /* 클릭하면 더 큰 높이로 확장 */
        }

        textarea.answer-input:hover {
            border-color: #b3b3b3;
        }

        .character-count {
            text-align: right;
            font-size: 13px;
            color: var(--naver-gray);
            margin-bottom: 10px;
        }

        .limit-exceeded {
            color: var(--naver-error);
        }

        /* 버튼 스타일 */
        .submit-container {
            margin-top: 50px;
            text-align: center;
            padding-bottom: 30px;
            position: relative;
        }

        .submit-container::before {
            content: "";
            position: absolute;
            top: -25px;
            left: 50%;
            transform: translateX(-50%);
            width: 100px;
            height: 1px;
            background: linear-gradient(to right, transparent, var(--naver-border), transparent);
        }

        .submit-btn {
            background-color: var(--naver-green);
            color: white;
            border: none;
            padding: 16px 0;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: background-color 0.2s, transform 0.2s;
            width: 100%;
            max-width: 320px;
            box-shadow: 0 4px 6px rgba(3, 199, 90, 0.2);
            position: relative;
            overflow: hidden;
            letter-spacing: 1px;
            text-transform: uppercase;
        }

        .submit-btn::after {
            content: "";
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(255,255,255,0.3) 0%, rgba(255,255,255,0) 70%);
            opacity: 0;
            transform: scale(0.5);
            transition: transform 0.5s, opacity 0.5s;
        }

        .submit-btn:hover::after {
            opacity: 1;
            transform: scale(1);
        }

        .submit-btn:hover {
            background-color: var(--naver-green-dark);
            transform: translateY(-2px);
        }

        .submit-btn:active {
            transform: translateY(0);
        }

        .submit-btn:disabled {
            background-color: #b2dfbe;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        /* 푸터 */
        .footer {
            text-align: center;
            padding: 20px 0 40px;
            color: var(--naver-gray);
            font-size: 13px;
        }

        .naver-copyright {
            margin-top: 10px;
            font-size: 12px;
        }

        /* 모바일 최적화 */
        @media (max-width: 768px) {
            .header h1 {
                font-size: 22px;
            }

            .header p {
                font-size: 14px;
            }

            .form-container {
                padding: 20px 15px;
            }

            .api-question {
                padding: 20px 15px;
            }
        }
    </style>
</head>
<body>
<div class="container">
    <div class="header">
        <h1>PL Lab</h1>
        <p>2025학년도 연구원 모집 지원서</p>
    </div>

    <div class="main-form">
        <div class="form-container">
            <div class="form-notice">
                <h3>지원 안내</h3>
                <p>모든 필수 항목<span class="required-mark">*</span>을 빠짐없이 작성해 주시기 바랍니다. 지원서는 제출 후 수정이 불가하오니 신중하게 작성해 주세요.</p>
            </div>

            <form id="application-form">
                <!-- 개인정보 입력 섹션 -->
                <div class="form-section">
                    <div class="section-title">지원자 정보</div>
                    <div class="personal-info-grid">
                        <div class="form-group">
                            <label class="form-label" for="student-id">학번 <span class="required-mark">*</span></label>
                            <input type="text" class="form-input" id="student-id" name="applicantStdNo" placeholder="예) 20210000" required>
                        </div>
                        <div class="form-group">
                            <label class="form-label" for="name">이름 <span class="required-mark">*</span></label>
                            <input type="text" class="form-input" id="name" name="applicantUserName" placeholder="이름을 입력하세요" required>
                        </div>
                        <div class="form-group">
                            <label class="form-label" for="email">이메일 <span class="required-mark">*</span></label>
                            <input type="email" class="form-input" id="email" name="applicantUserEmail" placeholder="예) example@domain.com" required>
                        </div>
                        <div class="form-group">
                            <label class="form-label" for="grade">학년 <span class="required-mark">*</span></label>
                            <select class="form-input" id="grade" name="applicantGrade" required>
                                <option value="">학년 선택</option>
                                <option value="1">1학년</option>
                                <option value="2">2학년</option>
                                <option value="3">3학년</option>
                                <option value="4">4학년</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label class="form-label" for="phone">연락처 <span class="required-mark">*</span></label>
                            <input type="tel" class="form-input" id="phone" name="applicantUserPhone" placeholder="예) 01012345678" required>
                        </div>
                    </div>
                </div>

                <div class="form-section" id="questions-section">
                    <div class="section-title">질문</div>
                    <div id="questions-container">
                        <div class="loading-questions">
                            <div class="loading-spinner"></div>
                            질문을 불러오는 중입니다...
                        </div>
                    </div>
                </div>

                <div class="submit-container">
                    <button type="submit" class="submit-btn">지원서 제출하기</button>
                </div>
            </form>
        </div>
    </div>

    <div class="footer">
        <div>본 지원서의 정보는 연구원 선발 과정에만 활용되며, 제출 후 수정이 불가합니다.</div>
        <div class="naver-copyright">© 2025 PL Lab. All rights reserved.</div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', async function() {
        const questionsContainer = document.getElementById('questions-container');
        const applicationForm = document.getElementById('application-form');

        // 질문 가져오기
        async function fetchQuestions() {
            try {
                const token = localStorage.getItem('web_t');

                // 토큰이 없으면 에러 표시
                if (!token) {
                    questionsContainer.innerHTML = '<div class="api-error">인증 토큰이 없습니다.</div>';
                    return;
                }

                const response = await fetch('https://pl-lab.site/apply/question/all', {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                const data = await response.json();

                if (data.status === "OK" && data.data) {
                    renderQuestions(data.data);
                } else {
                    localStorage.removeItem('web_t'); // 'web_t' 키 제거
                    location.reload(); // 페이지 새로고침 (필요하면 location.href 사용)
                }
            } catch (error) {
                console.error('질문 가져오기 오류:', error);
                questionsContainer.innerHTML = '<div class="api-error">서버 연결에 실패했습니다.</div>';
            }
        }

        // 질문과 답변 폼 화면에 표시
        function renderQuestions(questions) {
            questionsContainer.innerHTML = ''; // 로딩 메시지 삭제

            if (!questions || !questions.length) {
                questionsContainer.innerHTML = '<div class="api-error">질문이 없습니다.</div>';
                return;
            }

            questions.forEach((question, index) => {
                const questionDiv = document.createElement('div');
                questionDiv.className = 'api-question';
                questionDiv.style.animationDelay = `${index * 0.1}s`;

                // 질문 ID를 데이터 속성으로 저장
                questionDiv.dataset.questionId = question.questionId || index;

                // 문자 제한이 있는 경우 설정 (기본값: 1000자)
                const charLimit = question.characterLimit || 1000;

                questionDiv.innerHTML = `
                    <div class="question-text">
                        <div class="question-number">${index + 1}</div>
                        <div>${question.questionText} ${question.required ? '<span class="required-mark">*</span>' : ''}</div>
                    </div>
                    <div class="answer-form">
                        <div class="textarea-container">
                            <textarea
                                class="answer-input"
                                name="question_${question.id || index}"
                                placeholder="답변을 입력해 주세요."
                                maxlength="${charLimit}"
                                ${question.required ? 'required' : ''}
                            ></textarea>
                        </div>
                        <div class="character-count">
                            <span class="current-count">0</span>/<span class="max-count">${charLimit}</span>자
                        </div>
                    </div>
                `;

                questionsContainer.appendChild(questionDiv);

                // 텍스트 입력 시 글자 수 계산
                const textarea = questionDiv.querySelector('.answer-input');
                const currentCountSpan = questionDiv.querySelector('.current-count');
                const maxCount = charLimit;

                textarea.addEventListener('input', function() {
                    const currentLength = this.value.length;
                    currentCountSpan.textContent = currentLength;

                    // 글자 수 제한 초과 시 스타일 변경
                    if (currentLength >= maxCount) {
                        currentCountSpan.classList.add('limit-exceeded');
                    } else {
                        currentCountSpan.classList.remove('limit-exceeded');
                    }
                });
            });
        }

        // 폼 제출 처리 부분

applicationForm.addEventListener('submit', async function(e) {
    e.preventDefault();

    // 필수 항목 확인
    const requiredInputs = document.querySelectorAll('input[required], textarea[required], select[required]');
    let isValid = true;

    requiredInputs.forEach(input => {
        if (!input.value.trim()) {
            isValid = false;
            input.style.borderColor = 'var(--naver-error)';
        } else {
            input.style.borderColor = '';
        }
    });

    if (!isValid) {
        alert('필수 항목을 모두 입력해 주세요.');
        return;
    }

    try {
        const token = localStorage.getItem('web_t');
        if (!token) {
            alert('인증 토큰이 없습니다.');
            return;
        }

        // 학번 가져오기 - 모든 곳에서 일관되게 동일한 값 사용
        const studentId = document.getElementById('student-id').value.trim();

        if (!studentId) {
            alert('학번을 입력해주세요.');
            document.getElementById('student-id').focus();
            return;
        }

        // 개인정보 데이터 수집 - applicantStdNo가 명확히 설정되었는지 확인
        const personalInfo = {
            applicantStdNo: studentId,
            applicantUserName: document.getElementById('name').value,
            applicantUserEmail: document.getElementById('email').value,
            applicantGrade: document.getElementById('grade').value,
            applicantUserPhone: document.getElementById('phone').value
        };

        console.log("개인정보 제출 데이터:", JSON.stringify(personalInfo));

        // 개인정보 제출
        const personalResponse = await fetch('https://pl-lab.site/apply/personal/add', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify(personalInfo)
        });

        const personalResult = await personalResponse.json();
        console.log("개인정보 제출 응답:", personalResult);

        if (personalResult.status !== "OK") {
            alert(`개인정보 제출 실패: ${personalResult.message || '알 수 없는 오류'}`);
            return;
        }

        // 각 질문별로 개별 응답 제출
        const questions = document.querySelectorAll('.api-question');
        let allResponsesSubmitted = true;

        // 제출 버튼 비활성화 및 상태 표시
        const submitBtn = document.querySelector('.submit-btn');
        const originalBtnText = submitBtn.textContent;
        submitBtn.disabled = true;
        submitBtn.textContent = '제출 중...';

        // 모든 질문에 대해 하나씩 응답 API 호출
        for (const question of questions) {
            const questionId = question.dataset.questionId;
            const textarea = question.querySelector('.answer-input');

            // 응답 데이터 구성 - 학번은 앞에서 가져온 값 사용
            const responseData = {
                applicantStdNo: studentId,
                questionId: questionId,
                applicantResponse: textarea.value
            };

            console.log(`질문 ID ${questionId} 응답 제출 데이터:`, JSON.stringify(responseData));

            try {
                // 개별 응답 제출
                const responseSubmit = await fetch('https://pl-lab.site/apply/response/add', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify(responseData)
                });

                const responseResult = await responseSubmit.json();
                console.log(`질문 ID ${questionId} 응답 결과:`, responseResult);

                if (responseResult.status !== "OK") {
                    console.error(`질문 ID ${questionId}에 대한 응답 제출 실패:`, responseResult.message);
                    allResponsesSubmitted = false;
                }
            } catch (error) {
                console.error(`질문 ID ${questionId}에 대한 응답 제출 중 오류:`, error);
                allResponsesSubmitted = false;
            }
        }

        // 제출 버튼 상태 복원
        submitBtn.disabled = false;
        submitBtn.textContent = originalBtnText;

        if (allResponsesSubmitted) {
            window.location.href = 'https://pl-lab.site/apply/suc';
        } else {
            alert('일부 응답 제출이 실패했습니다. 다시 시도해 주세요.');
        }
    } catch (error) {
        console.error('제출 오류:', error);
        alert('서버 연결에 실패했습니다.');

        // 오류 발생 시에도 버튼 상태 복원
        const submitBtn = document.querySelector('.submit-btn');
        submitBtn.disabled = false;
        submitBtn.textContent = '지원서 제출';
    }
});

        // 페이지 로드 시 토큰 체크 및 질문 가져오기
        const token = localStorage.getItem('web_t');

        // 토큰이 없으면 토큰 발급 시도
        if (!token) {
            try {
                const response = await fetch('https://pl-lab.site/user/check');
                const data = await response.json();

                if (data.status === "OK" || (data.status === "UNAUTHORIZED" && data.data)) {
                    if (data.data) {
                        localStorage.setItem('web_t', data.data);
                    }
                    // 토큰 설정 후 질문 가져오기
                    fetchQuestions();
                } else {
                    questionsContainer.innerHTML = `<div class="api-error">인증에 실패했습니다: ${data.message || '알 수 없는 오류'}</div>`;
                }
            } catch (error) {
                console.error('토큰 확인 중 오류 발생:', error);
                questionsContainer.innerHTML = '<div class="api-error">서버 연결에 실패했습니다.</div>';
            }
        } else {
            // 이미 토큰이 있으면 바로 질문 가져오기
            fetchQuestions();
        }
    });
</script>
</body>
</html>