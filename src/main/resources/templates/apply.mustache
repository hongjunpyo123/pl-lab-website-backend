<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>PL Lab 지원서</title>
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@300;400;500;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-color: #6366f1;
            --primary-dark: #4f46e5;
            --primary-light: #a5b4fc;
            --secondary-color: #f3f4f6;
            --accent-color: #ec4899;
            --text-color: #1f2937;
            --border-color: #e5e7eb;
            --success-color: #10b981;
            --error-color: #ef4444;
            --dark-bg: #111827;
            --gray-light: #9ca3af;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Noto Sans KR', 'Apple SD Gothic Neo', sans-serif;
        }

        body {
            background-color: #f9fafb;
            color: var(--text-color);
            line-height: 1.6;
        }

        .container {
            max-width: 800px;
            margin: 10px auto;
            padding: 0 15px;
            width: 100%;
            box-sizing: border-box;
        }

        .header {
            background: linear-gradient(135deg, var(--primary-color), var(--primary-dark));
            color: white;
            padding: 25px 0;
            text-align: center;
            border-radius: 16px 16px 0 0;
            position: relative;
            box-shadow: 0 4px 20px rgba(99, 102, 241, 0.3);
        }

        .header h1 {
            font-size: 24px;
            margin-bottom: 6px;
            padding: 0 10px;
            font-weight: 700;
        }

        .header p {
            font-size: 16px;
            opacity: 0.9;
        }

        .header .lab-logo {
            position: absolute;
            top: 50%;
            left: 15px;
            transform: translateY(-50%);
            width: 44px;
            height: 44px;
            background: linear-gradient(135deg, #ec4899, #8b5cf6);
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
            font-size: 18px;
            box-shadow: 0 4px 10px rgba(236, 72, 153, 0.4);
        }

        .form-container {
            background-color: white;
            padding: 25px 20px;
            border-radius: 0 0 16px 16px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        }

        .form-section {
            margin-bottom: 25px;
            padding-bottom: 20px;
            border-bottom: 1px solid var(--border-color);
        }

        .form-section:last-child {
            border-bottom: none;
        }

        .section-title {
            font-size: 18px;
            margin-bottom: 15px;
            color: var(--primary-color);
            font-weight: 700;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .section-title::before {
            content: "";
            display: block;
            width: 4px;
            height: 18px;
            background: linear-gradient(to bottom, var(--primary-color), var(--accent-color));
            border-radius: 4px;
        }

        .form-notice {
            background-color: #f5f3ff;
            padding: 16px;
            border-radius: 12px;
            margin-bottom: 24px;
            font-size: 15px;
            position: relative;
            overflow: hidden;
        }

        .form-notice h3 {
            margin-bottom: 8px;
            color: var(--primary-color);
            font-weight: 700;
            font-size: 17px;
        }

        .form-notice::before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 4px;
            height: 100%;
            background: linear-gradient(to bottom, var(--primary-color), var(--accent-color));
        }

        /* API 질문 관련 스타일 */
        .loading-questions {
            padding: 15px;
            text-align: center;
            color: #777;
            font-size: 16px;
        }

        .api-question {
            margin-bottom: 20px;
            padding: 15px;
            border-radius: 10px;
            background-color: #f9fafb;
            border: 1px solid #ddd;
            animation: fadeIn 0.5s ease-out forwards;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .question-text {
            font-weight: 600;
            margin-bottom: 12px;
            font-size: 15px;
        }

        .question-description {
            font-size: 13px;
            color: #666;
            margin-bottom: 12px;
            border-left: 2px solid #ccc;
            padding-left: 8px;
        }

        .api-error {
            color: red;
            text-align: center;
            padding: 15px;
            background-color: #fee2e2;
            border-radius: 8px;
            margin-top: 10px;
            font-weight: 500;
        }

        /* 개인정보 입력 폼 스타일 */
        .personal-info-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 16px;
            margin-bottom: 20px;
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
            font-size: 14px;
        }

        .form-input {
            width: 100%;
            padding: 10px 12px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 14px;
            transition: border-color 0.3s;
        }

        .form-input:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 2px rgba(99, 102, 241, 0.2);
        }

        /* 답변 폼 스타일 */
        .answer-form {
            margin-top: 12px;
        }

        .textarea-container {
            position: relative;
        }

        textarea.answer-input {
            width: 100%;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 14px;
            min-height: 120px;
            resize: vertical;
            margin-bottom: 5px;
            transition: border-color 0.3s;
        }

        textarea.answer-input:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 2px rgba(99, 102, 241, 0.2);
        }

        .character-count {
            text-align: right;
            font-size: 12px;
            color: #666;
            margin-bottom: 10px;
        }

        .limit-exceeded {
            color: var(--error-color);
        }

        /* 버튼 스타일 */
        .submit-container {
            margin-top: 30px;
            text-align: center;
        }

        .submit-btn {
            background: linear-gradient(135deg, var(--primary-color), var(--primary-dark));
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 500;
            cursor: pointer;
            transition: transform 0.2s, box-shadow 0.2s;
            box-shadow: 0 4px 6px rgba(99, 102, 241, 0.25);
        }

        .submit-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 10px rgba(99, 102, 241, 0.3);
        }

        .submit-btn:active {
            transform: translateY(0);
        }

        /* 모바일 최적화 */
        @media (max-width: 768px) {
            .header .lab-logo {
                width: 36px;
                height: 36px;
                font-size: 14px;
            }

            .header h1 {
                font-size: 18px;
                padding: 0 30px;
            }

            .personal-info-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
<div class="container">
    <div class="header">
        <div class="lab-logo">PL</div>
        <h1>PL Lab 지원서</h1>
        <p>2025학년도 연구원 모집</p>
    </div>

    <div class="form-container">
        <div class="form-notice">
            <h3>지원 안내</h3>
            <p>본 지원서는 프로그래밍 언어 연구실(PL Lab)의 연구원 선발을 위한 지원서입니다. 모든 필수 항목(*)을 빠짐없이 기입해 주시기 바랍니다.</p>
        </div>

        <form id="application-form">
            <!-- 개인정보 입력 섹션 -->
            <div class="form-section">
                <div class="section-title">개인 정보</div>
                <div class="personal-info-grid">
                    <div class="form-group">
                        <label class="form-label" for="student-id">학번 *</label>
                        <input type="text" class="form-input" id="student-id" name="applicantStdNo" placeholder="예) 20210000" required>
                    </div>
                    <div class="form-group">
                        <label class="form-label" for="name">이름 *</label>
                        <input type="text" class="form-input" id="name" name="applicantUserName" required>
                    </div>
                    <div class="form-group">
                        <label class="form-label" for="email">이메일 *</label>
                        <input type="email" class="form-input" id="email" name="applicantUserEmail" required>
                    </div>
                    <div class="form-group">
                        <label class="form-label" for="grade">학년 *</label>
                        <select class="form-input" id="grade" name="applicantGrade" required>
                            <option value="">학년 선택</option>
                            <option value="1">1학년</option>
                            <option value="2">2학년</option>
                            <option value="3">3학년</option>
                            <option value="4">4학년</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label class="form-label" for="phone">핸드폰 번호 *</label>
                        <input type="tel" class="form-input" id="phone" name="applicantUserPhone" placeholder="예) 01012345678" required>
                    </div>
                </div>
            </div>

            <div class="form-section" id="questions-section">
                <div class="section-title">지원 질문</div>
                <div id="questions-container">
                    <div class="loading-questions">질문을 불러오는 중입니다...</div>
                </div>
            </div>

            <div class="submit-container">
                <button type="submit" class="submit-btn">지원서 제출</button>
            </div>
        </form>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', async function() {
        const questionsContainer = document.getElementById('questions-container');
        const applicationForm = document.getElementById('application-form');

        // 질문 가져오기
        async function fetchQuestions() {
            try {
                const token = localStorage.getItem('web_t');

                // 토큰이 없으면 에러 표시
                if (!token) {
                    questionsContainer.innerHTML = '<div class="api-error">인증 토큰이 없습니다.</div>';
                    return;
                }

                const response = await fetch('https://pl-lab.site/apply/question/all', {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                const data = await response.json();

                if (data.status === "OK" && data.data) {
                    renderQuestions(data.data);
                } else {
                    questionsContainer.innerHTML = `<div class="api-error">질문을 불러오는데 실패했습니다: ${data.message || '알 수 없는 오류'}</div>`;
                }
            } catch (error) {
                console.error('질문 가져오기 오류:', error);
                questionsContainer.innerHTML = '<div class="api-error">서버 연결에 실패했습니다.</div>';
            }
        }

        // 질문과 답변 폼 화면에 표시
        function renderQuestions(questions) {
            questionsContainer.innerHTML = ''; // 로딩 메시지 삭제

            if (!questions || !questions.length) {
                questionsContainer.innerHTML = '<div class="api-error">질문이 없습니다.</div>';
                return;
            }

            questions.forEach((question, index) => {
                const questionDiv = document.createElement('div');
                questionDiv.className = 'api-question';
                questionDiv.style.animationDelay = `${index * 0.1}s`;

                // 질문 ID를 데이터 속성으로 저장
                questionDiv.dataset.questionId = question.questionId || index;

                // 문자 제한이 있는 경우 설정 (기본값: 1000자)
                const charLimit = question.characterLimit || 1000;

                questionDiv.innerHTML = `
                    <div class="question-text">${index + 1}. ${question.questionText} ${question.required ? '*' : ''}</div>
                    <div class="answer-form">
                        <div class="textarea-container">
                            <textarea
                                class="answer-input"
                                name="question_${question.id || index}"
                                placeholder="답변을 입력해 주세요."
                                maxlength="${charLimit}"
                                ${question.required ? 'required' : ''}
                            ></textarea>
                        </div>
                        <div class="character-count">
                            <span class="current-count">0</span>/<span class="max-count">${charLimit}</span>자
                        </div>
                    </div>
                `;

                questionsContainer.appendChild(questionDiv);

                // 텍스트 입력 시 글자 수 계산
                const textarea = questionDiv.querySelector('.answer-input');
                const currentCountSpan = questionDiv.querySelector('.current-count');
                const maxCount = charLimit;

                textarea.addEventListener('input', function() {
                    const currentLength = this.value.length;
                    currentCountSpan.textContent = currentLength;

                    // 글자 수 제한 초과 시 스타일 변경
                    if (currentLength >= maxCount) {
                        currentCountSpan.classList.add('limit-exceeded');
                    } else {
                        currentCountSpan.classList.remove('limit-exceeded');
                    }
                });
            });
        }

        // 폼 제출 처리 부분만 수정한 코드입니다.

applicationForm.addEventListener('submit', async function(e) {
    e.preventDefault();

    // 필수 항목 확인
    const requiredInputs = document.querySelectorAll('input[required], textarea[required], select[required]');
    let isValid = true;

    requiredInputs.forEach(input => {
        if (!input.value.trim()) {
            isValid = false;
            input.style.borderColor = 'var(--error-color)';
        } else {
            input.style.borderColor = '';
        }
    });

    if (!isValid) {
        alert('필수 항목을 모두 입력해 주세요.');
        return;
    }

    try {
        const token = localStorage.getItem('web_t');
        if (!token) {
            alert('인증 토큰이 없습니다.');
            return;
        }

        // 학번 가져오기 - 모든 곳에서 일관되게 동일한 값 사용
        const studentId = document.getElementById('student-id').value.trim();

        if (!studentId) {
            alert('학번을 입력해주세요.');
            document.getElementById('student-id').focus();
            return;
        }

        // 개인정보 데이터 수집 - applicantStdNo가 명확히 설정되었는지 확인
        const personalInfo = {
            applicantStdNo: studentId,
            applicantUserName: document.getElementById('name').value,
            applicantUserEmail: document.getElementById('email').value,
            applicantGrade: document.getElementById('grade').value,
            applicantUserPhone: document.getElementById('phone').value
        };

        console.log("개인정보 제출 데이터:", JSON.stringify(personalInfo));

        // 개인정보 제출
        const personalResponse = await fetch('https://pl-lab.site/apply/personal/add', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify(personalInfo)
        });

        const personalResult = await personalResponse.json();
        console.log("개인정보 제출 응답:", personalResult);

        if (personalResult.status !== "OK") {
            alert(`개인정보 제출 실패: ${personalResult.message || '알 수 없는 오류'}`);
            return;
        }

        // 각 질문별로 개별 응답 제출
        const questions = document.querySelectorAll('.api-question');
        let allResponsesSubmitted = true;

        // 제출 버튼 비활성화 및 상태 표시
        const submitBtn = document.querySelector('.submit-btn');
        const originalBtnText = submitBtn.textContent;
        submitBtn.disabled = true;
        submitBtn.textContent = '제출 중...';

        // 모든 질문에 대해 하나씩 응답 API 호출
        for (const question of questions) {
            const questionId = question.dataset.questionId;
            const textarea = question.querySelector('.answer-input');

            // 응답 데이터 구성 - 학번은 앞에서 가져온 값 사용
            const responseData = {
                applicantStdNo: studentId,
                questionId: questionId,
                applicantResponse: textarea.value
            };

            console.log(`질문 ID ${questionId} 응답 제출 데이터:`, JSON.stringify(responseData));

            try {
                // 개별 응답 제출
                const responseSubmit = await fetch('https://pl-lab.site/apply/response/add', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify(responseData)
                });

                const responseResult = await responseSubmit.json();
                console.log(`질문 ID ${questionId} 응답 결과:`, responseResult);

                if (responseResult.status !== "OK") {
                    console.error(`질문 ID ${questionId}에 대한 응답 제출 실패:`, responseResult.message);
                    allResponsesSubmitted = false;
                }
            } catch (error) {
                console.error(`질문 ID ${questionId}에 대한 응답 제출 중 오류:`, error);
                allResponsesSubmitted = false;
            }
        }

        // 제출 버튼 상태 복원
        submitBtn.disabled = false;
        submitBtn.textContent = originalBtnText;

        if (allResponsesSubmitted) {
            alert('지원서가 성공적으로 제출되었습니다.');
            // 성공 시 처리 (예: 다른 페이지로 이동)
            // window.location.href = "success.html";
        } else {
            alert('일부 응답 제출이 실패했습니다. 다시 시도해 주세요.');
        }
    } catch (error) {
        console.error('제출 오류:', error);
        alert('서버 연결에 실패했습니다.');

        // 오류 발생 시에도 버튼 상태 복원
        const submitBtn = document.querySelector('.submit-btn');
        submitBtn.disabled = false;
        submitBtn.textContent = '지원서 제출';
    }
});

        // 페이지 로드 시 토큰 체크 및 질문 가져오기
        const token = localStorage.getItem('web_t');

        // 토큰이 없으면 토큰 발급 시도
        if (!token) {
            try {
                const response = await fetch('https://pl-lab.site/user/check');
                const data = await response.json();

                if (data.status === "OK" || (data.status === "UNAUTHORIZED" && data.data)) {
                    if (data.data) {
                        localStorage.setItem('web_t', data.data);
                    }
                    // 토큰 설정 후 질문 가져오기
                    fetchQuestions();
                } else {
                    questionsContainer.innerHTML = `<div class="api-error">인증에 실패했습니다: ${data.message || '알 수 없는 오류'}</div>`;
                }
            } catch (error) {
                console.error('토큰 확인 중 오류 발생:', error);
                questionsContainer.innerHTML = '<div class="api-error">서버 연결에 실패했습니다.</div>';
            }
        } else {
            // 이미 토큰이 있으면 바로 질문 가져오기
            fetchQuestions();
        }
    });
</script>
</body>
</html>