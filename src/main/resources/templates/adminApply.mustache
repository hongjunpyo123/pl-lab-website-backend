<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PL Lab 지원자 관리</title>
    <style>
        body { font-family: 'Arial', sans-serif; margin: 0; padding: 0; background-color: #f5f5f5; }
        .container { max-width: 1200px; margin: 20px auto; padding: 0 15px; }
        .header { background-color: #6366f1; color: white; padding: 20px; text-align: center; border-radius: 10px 10px 0 0; }
        .admin-panel { background-color: white; padding: 20px; border-radius: 0 0 10px 10px; }
        .section-title { font-size: 18px; margin-bottom: 15px; color: #6366f1; font-weight: bold; }
        table { width: 100%; border-collapse: collapse; }
        th, td { padding: 10px; text-align: left; border-bottom: 1px solid #ddd; }
        th { background-color: #f8f9fa; }
        .status-badge { display: inline-block; padding: 4px 8px; border-radius: 20px; font-size: 12px; font-weight: bold; cursor: pointer; }
        .status-accepted { background-color: #d1fae5; color: #047857; }
        .status-rejected { background-color: #f3f4f6; color: #4b5563; }
        .status-pending { background-color: #fee2e2; color: #b91c1c; }
        .status-reviewing { background-color: #fef3c7; color: #92400e; }
        .btn { padding: 6px 12px; border: none; border-radius: 4px; cursor: pointer; }
        .btn-primary { background-color: #6366f1; color: white; }
        .btn-danger { background-color: #ef4444; color: white; }
        .modal-backdrop { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.5); display: flex; justify-content: center; align-items: center; z-index: 1000; display: none; }
        .modal { background-color: white; width: 90%; max-width: 600px; border-radius: 10px; overflow: hidden; display: flex; flex-direction: column; max-height: 90vh; }
        .modal-header { background-color: #6366f1; color: white; padding: 15px; position: relative; flex-shrink: 0; }
        .modal-body { padding: 15px; overflow-y: auto; flex-grow: 1; }
        .modal-footer { padding: 15px; border-top: 1px solid #ddd; display: flex; justify-content: flex-end; gap: 10px; flex-shrink: 0; }
        .close-btn { position: absolute; top: 10px; right: 10px; background: none; border: none; color: white; font-size: 20px; cursor: pointer; }
        .status-options { display: grid; grid-template-columns: repeat(2, 1fr); gap: 10px; margin: 15px 0; }
        .status-option { padding: 10px; border-radius: 4px; text-align: center; cursor: pointer; }
        .status-option.selected { border: 2px solid #6366f1; }
        .refresh-status { display: inline-block; margin-left: 10px; font-size: 14px; color: #6366f1; }
        .refresh-indicator { display: inline-block; width: 10px; height: 10px; border-radius: 50%; background-color: #10b981; margin-right: 5px; animation: pulse 2s infinite; }
        @keyframes pulse { 0% { opacity: 1; } 50% { opacity: 0.3; } 100% { opacity: 1; } }
        .tabs { display: flex; border-bottom: 1px solid #ddd; margin-bottom: 15px; flex-shrink: 0; }
        .tab { padding: 10px 15px; cursor: pointer; border-bottom: 2px solid transparent; }
        .tab.active { color: #6366f1; border-bottom: 2px solid #6366f1; font-weight: bold; }
        .tab-content { display: none; }
        .tab-content.active { display: block; }
        .login-container { max-width: 320px; margin: 30px auto; background-color: white; border-radius: 6px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); padding: 25px; }
        .login-header { margin-bottom: 20px; }
        .login-header h1 { font-size: 18px; color: #333; margin-bottom: 5px; }
        .login-form .input-group { margin-bottom: 15px; }
        .input-group label { display: block; font-size: 13px; color: #555; margin-bottom: 5px; }
        .input-group input { width: 100%; padding: 8px 10px; border: 1px solid #ddd; border-radius: 4px; font-size: 14px; }
        .input-group input:focus { outline: none; border-color: #aaa; }
        .login-button { width: 100%; background-color: #6366f1; color: white; border: none; padding: 10px 0; border-radius: 4px; font-size: 14px; cursor: pointer; }
        .login-button:hover { background-color: #5253cc; }
        @media (max-width: 768px) {
            .btn { padding: 8px 12px; margin: 2px; }
            table { display: block; overflow-x: auto; }
            th, td { white-space: nowrap; padding: 8px 5px; }
            .modal { width: 95%; max-height: 85vh; }
            .status-options { grid-template-columns: 1fr; }
            .action-buttons { display: flex; flex-direction: column; gap: 5px; }
            .tab { padding: 12px; flex-grow: 1; text-align: center; }
        }
    </style>
</head>
<body>
<div class="container">
    <div class="header">
        <h1>PL Lab 지원자 관리</h1>
    </div>

    <!-- 로그인 섹션 포함 (처음에는 이것만 표시됨) -->
    <div id="login-section">
        {{> login}}
    </div>

    <!-- 관리자 패널 (로그인 후 표시됨) -->
    <div id="admin-panel" style="display: none;">
        <div class="section-title">
            지원자 목록
            <span class="refresh-status">
                <span class="refresh-indicator"></span>
                자동 새로고침 중
            </span>
        </div>
        <div id="applicants-container">
            <div style="text-align: center; padding: 20px;">데이터를 불러오는 중...</div>
        </div>
    </div>
</div>

<!-- 상세 정보 모달 -->
<div id="detail-view-backdrop" class="modal-backdrop">
    <div class="modal">
        <div class="modal-header">
            <h2 id="detail-name">지원자 정보</h2>
            <p id="detail-stdno">학번: 20000000</p>
            <button class="close-btn" id="detail-close">&times;</button>
        </div>
        <div class="tabs">
            <div class="tab active" data-tab="personal-info">개인 정보</div>
            <div class="tab" data-tab="application-answers">지원서 답변</div>
        </div>
        <div class="modal-body">
            <div id="personal-info" class="tab-content active">
                <div id="detail-info" style="margin: 10px 0;"></div>
            </div>
            <div id="application-answers" class="tab-content">
                <div id="detail-answers"></div>
            </div>
        </div>
        <div class="modal-footer">
            <button class="btn btn-primary" id="detail-close-btn">닫기</button>
        </div>
    </div>
</div>

<!-- 상태 변경 모달 -->
<div id="status-modal-backdrop" class="modal-backdrop">
    <div class="modal" style="max-width: 400px;">
        <div class="modal-header">
            <h3>지원 상태 변경</h3>
            <button class="close-btn" id="status-close">&times;</button>
        </div>
        <div class="modal-body">
            <p>변경할 상태를 선택하세요:</p>
            <div class="status-options">
                <div class="status-option status-accepted" data-status="001">합격</div>
                <div class="status-option status-rejected" data-status="002">불합격</div>
                <div class="status-option status-pending" data-status="003">보류</div>
                <div class="status-option status-reviewing" data-status="004">심사중</div>
            </div>
        </div>
        <div class="modal-footer">
            <button class="btn" id="status-cancel-btn">취소</button>
            <button class="btn btn-primary" id="status-save-btn">저장</button>
        </div>
    </div>
</div>

<!-- 삭제 확인 모달 -->
<div id="confirm-modal-backdrop" class="modal-backdrop">
    <div class="modal" style="max-width: 350px;">
        <div class="modal-header">
            <h3>지원자 삭제</h3>
            <button class="close-btn" id="confirm-close">&times;</button>
        </div>
        <div class="modal-body" id="confirm-body">
            <p>정말로 이 지원자를 삭제하시겠습니까?</p>
            <p>이 작업은 되돌릴 수 없습니다.</p>
        </div>
        <div class="modal-footer">
            <button class="btn" id="confirm-cancel-btn">취소</button>
            <button class="btn btn-danger" id="confirm-delete-btn">삭제</button>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // 상태 코드 매핑
        const statusMap = {
            '001': { text: '합격', class: 'status-accepted' },
            '002': { text: '불합격', class: 'status-rejected' },
            '003': { text: '보류', class: 'status-pending' },
            '004': { text: '심사중', class: 'status-reviewing' }
        };

        // 전역 변수
        let applicants = [];
        let currentDetail = null;
        let currentStatusTarget = null;
        let currentDeleteTarget = null;
        let autoRefreshInterval = null;
        let isModalOpen = false;

         // 자동 새로고침 시작
        startAutoRefresh();

        // 자동 새로고침 함수
        function startAutoRefresh() {
            // 기존 인터벌 제거
            if (autoRefreshInterval) {
                clearInterval(autoRefreshInterval);
            }

            // 2초마다 데이터 새로고침
            autoRefreshInterval = setInterval(function() {
                // 모달이 열려있지 않을 때만 새로고침
                if (!isModalOpen) {
                    fetchApplicants();
                }
            }, 2000);
        }

        // 토큰 확인 및 초기 화면 설정
        checkAuthAndInitialize();

        // 자동 새로고침 중지
        function stopAutoRefresh() {
            if (autoRefreshInterval) {
                clearInterval(autoRefreshInterval);
                autoRefreshInterval = null;
            }
        }

        // 지원자 데이터 가져오기
        window.fetchApplicants = async function() {
            const applicantsContainer = document.getElementById('applicants-container');

            if (applicants.length === 0) {
                applicantsContainer.innerHTML = '<div style="text-align: center; padding: 20px;">데이터를 불러오는 중...</div>';
            }

            try {
                const token = localStorage.getItem('web_t');
                if (!token) throw new Error('인증 토큰이 없습니다.');

                const response = await fetch('https://pl-lab.site/apply/history/all', {
                    headers: { 'Authorization': `Bearer ${token}` }
                });

                const result = await response.json();

                if (result.status === 'OK' && result.data) {
                    const hasChanged = JSON.stringify(applicants) !== JSON.stringify(result.data);
                    if (hasChanged) {
                        applicants = result.data;
                        renderApplicants();
                    }
                } else {
                    throw new Error(result.message || '데이터를 불러오는데 실패했습니다.');
                }
            } catch (error) {
                console.error('지원자 데이터 로드 오류:', error);

                if (error.message.includes('인증') || error.message.includes('토큰')) {
                    localStorage.removeItem('web_t');
                    checkAuthAndInitialize();
                    return;
                }

                if (applicants.length === 0) {
                    applicantsContainer.innerHTML = '<div style="text-align: center; color: red; padding: 20px;">지원자 목록을 불러오는데 실패했습니다.</div>';
                }
            }
        };

        // 인증 확인 및 초기화
        function checkAuthAndInitialize() {
            const token = localStorage.getItem('web_t');
            if (token) {
                document.getElementById('login-section').style.display = 'none';
                document.getElementById('admin-panel').style.display = 'block';
                fetchApplicants();
                startAutoRefresh();
            } else {
                document.getElementById('login-section').style.display = 'block';
                document.getElementById('admin-panel').style.display = 'none';
            }
        }

        // 자동 새로고침 시작
        function startAutoRefresh() {
            if (autoRefreshInterval) clearInterval(autoRefreshInterval);
            autoRefreshInterval = setInterval(function() {
                if (!isModalOpen) fetchApplicants();
            }, 2000);
        }


        // 지원자 목록 렌더링
        function renderApplicants() {
            const applicantsContainer = document.getElementById('applicants-container');

            if (applicants.length === 0) {
                applicantsContainer.innerHTML = '<div style="text-align: center; padding: 20px;">지원자가 없습니다.</div>';
                return;
            }

            let tableHTML = `
                <table>
                    <thead>
                        <tr>
                            <th>학번</th>
                            <th>이름</th>
                            <th>지원일시</th>
                            <th>상태</th>
                            <th>관리</th>
                        </tr>
                    </thead>
                    <tbody>
            `;

            applicants.forEach(applicant => {
                const status = statusMap[applicant.statusCode] || { text: '알 수 없음', class: '' };
                tableHTML += `
                    <tr>
                        <td>${applicant.applicantStdNo}</td>
                        <td>${applicant.applicantUserName}</td>
                        <td>${applicant.applicantRegDt}</td>
                        <td>
                            <span class="status-badge ${status.class}" onclick="window.changeStatus('${applicant.applicantStdNo}', '${applicant.statusCode}')">
                                ${status.text}
                            </span>
                        </td>
                        <td class="action-buttons">
                            <button class="btn btn-primary" onclick="window.viewDetails('${applicant.applicantStdNo}')">상세보기</button>
                            <button class="btn btn-danger" onclick="window.confirmDelete('${applicant.applicantStdNo}', '${applicant.applicantUserName}')">삭제</button>
                        </td>
                    </tr>
                `;
            });

            tableHTML += '</tbody></table>';
            applicantsContainer.innerHTML = tableHTML;
        }

        // 상세 정보 보기 함수
        window.viewDetails = async function(stdno) {
            isModalOpen = true;
            document.getElementById('detail-name').textContent = "데이터 로딩 중...";
            document.getElementById('detail-stdno').textContent = `학번: ${stdno}`;
            document.getElementById('detail-info').innerHTML = '<div style="text-align: center; padding: 20px;">개인 정보를 불러오는 중...</div>';
            document.getElementById('detail-answers').innerHTML = '<div style="text-align: center; padding: 20px;">답변 정보를 불러오는 중...</div>';
            document.getElementById('detail-view-backdrop').style.display = 'flex';

            try {
                const token = localStorage.getItem('web_t');

                // 1. 개인 정보 가져오기
                const personalResponse = await fetch(`https://pl-lab.site/apply/personal/${stdno}`, {
                    headers: { 'Authorization': `Bearer ${token}` }
                });
                const personalResult = await personalResponse.json();
                if (personalResult.status !== 'OK') throw new Error('개인 정보를 불러오는데 실패했습니다.');
                const personalInfo = personalResult.data;

                // 2. 질문 목록 가져오기
                const questionsResponse = await fetch(`https://pl-lab.site/apply/question/all`, {
                    headers: { 'Authorization': `Bearer ${token}` }
                });
                const questionsResult = await questionsResponse.json();
                if (questionsResult.status !== 'OK') throw new Error('질문 정보를 불러오는데 실패했습니다.');
                const questions = questionsResult.data;

                // 3. 응답 정보 가져오기
                const responsesResponse = await fetch(`https://pl-lab.site/apply/response/${stdno}`, {
                    headers: { 'Authorization': `Bearer ${token}` }
                });
                const responsesResult = await responsesResponse.json();
                if (responsesResult.status !== 'OK') throw new Error('응답 정보를 불러오는데 실패했습니다.');
                const responses = responsesResult.data;

                // 4. 필요한 정보 저장
                currentDetail = { stdno, personal: personalInfo, questions, responses };

                // 5. 모달에 정보 표시
                displayPersonalInfo(personalInfo);
                displayQuestionsAndResponses(questions, responses);
            } catch (error) {
                console.error('상세 정보 로드 오류:', error);
                document.getElementById('detail-info').innerHTML = '<div style="text-align: center; color: red; padding: 20px;">개인 정보 로드 실패</div>';
                document.getElementById('detail-answers').innerHTML = '<div style="text-align: center; color: red; padding: 20px;">답변 정보 로드 실패</div>';
            }
        };

        // 상세 정보 모달 채우기
        function displayPersonalInfo(personal) {
            document.getElementById('detail-name').textContent = personal.applicantUserName;
            document.getElementById('detail-stdno').textContent = `학번: ${personal.applicantStdNo}`;
            document.getElementById('detail-info').innerHTML = `
                <p><strong>이메일:</strong> <span id="detail-email">${personal.applicantUserEmail}</span></p>
                <p><strong>핸드폰 번호:</strong> <span id="detail-phone">${personal.applicantUserPhone}</span></p>
                <p><strong>학년:</strong> <span id="detail-grade">${personal.applicantGrade}학년</span></p>
                <p><strong>지원일시:</strong> <span id="detail-date">${getApplicationDate(personal.applicantStdNo)}</span></p>
            `;
        }

        // 지원 날짜 가져오기
        function getApplicationDate(stdno) {
            const applicant = applicants.find(a => a.applicantStdNo === stdno);
            return applicant ? applicant.applicantRegDt : '정보 없음';
        }

        // 질문과 응답 매칭하여 표시
        function displayQuestionsAndResponses(questions, responses) {
            const answersContainer = document.getElementById('detail-answers');
            answersContainer.innerHTML = '';

            if (questions.length === 0 || responses.length === 0) {
                answersContainer.innerHTML = '<div style="text-align: center; padding: 20px;">질문 또는 응답 정보가 없습니다.</div>';
                return;
            }

            const responseMap = {};
            responses.forEach(response => {
                responseMap[response.questionId] = response.applicantResponse;
            });

            questions.forEach((question, index) => {
                const questionId = question.questionId.toString();
                const response = responseMap[questionId] || '답변 없음';

                const answerElement = document.createElement('div');
                answerElement.style.marginBottom = '15px';
                answerElement.style.paddingBottom = '15px';
                answerElement.style.borderBottom = index < questions.length - 1 ? '1px solid #ddd' : 'none';

                answerElement.innerHTML = `
                    <div style="font-weight: bold; margin-bottom: 5px;">${index + 1}. ${question.questionText}</div>
                    <div style="white-space: pre-line; background-color: #f8f9fa; padding: 10px; border-radius: 4px;">
                        ${response}
                    </div>
                `;
                answersContainer.appendChild(answerElement);
            });
        }

        // 탭 전환 기능
        document.querySelectorAll('.tab').forEach(tab => {
            tab.addEventListener('click', function() {
                document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
                this.classList.add('active');

                const tabId = this.getAttribute('data-tab');
                document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
                document.getElementById(tabId).classList.add('active');
            });
        });

        // 상태 변경 함수
        window.changeStatus = function(stdno, currentStatus) {
            isModalOpen = true;
            currentStatusTarget = { stdno, currentStatus };

            document.querySelectorAll('.status-option').forEach(option => {
                option.classList.toggle('selected', option.getAttribute('data-status') === currentStatus);
            });

            document.getElementById('status-modal-backdrop').style.display = 'flex';
        };

        // 삭제 확인 함수
        window.confirmDelete = function(stdno, name) {
            isModalOpen = true;
            currentDeleteTarget = { stdno, name };

            document.getElementById('confirm-body').innerHTML = `
                <p>정말로 <strong>${name}</strong>(${stdno}) 지원자를 삭제하시겠습니까?</p>
                <p>이 작업은 되돌릴 수 없습니다.</p>
            `;

            document.getElementById('confirm-modal-backdrop').style.display = 'flex';
        };

        // 상태 변경 API 호출
        async function updateApplicantStatus(stdno, statusCode) {
            try {
                const token = localStorage.getItem('web_t');
                if (!token) throw new Error('인증 토큰이 없습니다.');

                const response = await fetch('https://pl-lab.site/apply/status/update', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify({
                        applicantStdNo: stdno,
                        statusCode: statusCode
                    })
                });

                const result = await response.json();

                if (result.status === 'OK') {
                    const applicantIndex = applicants.findIndex(a => a.applicantStdNo === stdno);
                    if (applicantIndex !== -1) {
                        applicants[applicantIndex].statusCode = statusCode;
                    }
                    renderApplicants();
                    return true;
                } else {
                    throw new Error(result.message || '상태 변경에 실패했습니다.');
                }
            } catch (error) {
                console.error('상태 변경 오류:', error);
                alert(`상태 변경에 실패했습니다: ${error.message}`);
                return false;
            }
        }

        // 지원자 삭제 API 호출
        async function deleteApplicant(stdno) {
            try {
                const token = localStorage.getItem('web_t');
                if (!token) throw new Error('인증 토큰이 없습니다.');

                const response = await fetch(`https://pl-lab.site/apply/personal`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify({
                        "applicantStdNo": stdno
                    })
                });

                const result = await response.json();

                if (result.status === 'OK') {
                    applicants = applicants.filter(a => a.applicantStdNo !== stdno);
                    renderApplicants();
                    return true;
                } else {
                    throw new Error(result.message || '지원자 삭제에 실패했습니다.');
                }
            } catch (error) {
                console.error('지원자 삭제 오류:', error);
                alert(`지원자 삭제에 실패했습니다: ${error.message}`);
                return false;
            }
        }

        // 모달 닫기 함수들
        function closeDetailModal() {
            document.getElementById('detail-view-backdrop').style.display = 'none';
            currentDetail = null;
            isModalOpen = false;
        }

        function closeStatusModal() {
            document.getElementById('status-modal-backdrop').style.display = 'none';
            currentStatusTarget = null;
            isModalOpen = false;
        }

        function closeConfirmModal() {
            document.getElementById('confirm-modal-backdrop').style.display = 'none';
            currentDeleteTarget = null;
            isModalOpen = false;
        }

        // 이벤트 리스너 등록
        document.getElementById('detail-close').addEventListener('click', closeDetailModal);
        document.getElementById('detail-close-btn').addEventListener('click', closeDetailModal);
        document.getElementById('detail-view-backdrop').addEventListener('click', function(e) {
            if (e.target === this) closeDetailModal();
        });

        document.getElementById('status-close').addEventListener('click', closeStatusModal);
        document.getElementById('status-cancel-btn').addEventListener('click', closeStatusModal);
        document.getElementById('status-modal-backdrop').addEventListener('click', function(e) {
            if (e.target === this) closeStatusModal();
        });

        document.querySelectorAll('.status-option').forEach(option => {
            option.addEventListener('click', function() {
                document.querySelectorAll('.status-option').forEach(opt => opt.classList.remove('selected'));
                this.classList.add('selected');
            });
        });

        document.getElementById('status-save-btn').addEventListener('click', async function() {
            const selectedOption = document.querySelector('.status-option.selected');
            if (!selectedOption || !currentStatusTarget) return;

            const newStatus = selectedOption.getAttribute('data-status');

            if (newStatus !== currentStatusTarget.currentStatus) {
                const saved = await updateApplicantStatus(currentStatusTarget.stdno, newStatus);
                if (saved) closeStatusModal();
            } else {
                closeStatusModal();
            }
        });

        document.getElementById('confirm-close').addEventListener('click', closeConfirmModal);
        document.getElementById('confirm-cancel-btn').addEventListener('click', closeConfirmModal);
        document.getElementById('confirm-modal-backdrop').addEventListener('click', function(e) {
            if (e.target === this) closeConfirmModal();
        });

        document.getElementById('confirm-delete-btn').addEventListener('click', async function() {
            if (!currentDeleteTarget) return;
            const deleted = await deleteApplicant(currentDeleteTarget.stdno);
            if (deleted) closeConfirmModal();
        });
    });
</script>
</body>
</html>